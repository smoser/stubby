#!/bin/sh
fail() { echo "$@" 1>&2; exit 1; }
Usage() {
    cat <<EOF
Usage: ${0##*/} outd [rel]

Grab stuff from system into outd.
EOF
}

info() {
    echo "release: $REL"
    echo "packages:"
    for p in ovmf shim-signed; do
        v=$(dpkg-query --show --showformat='${Version}' "$p") ||
            fail "failed to get version for $p"
        echo "  $p: \"$v\""
    done
}

[ "$1" = "-h" -o "$1" = "--help" ] && { Usage; exit 0; }

[ "$1" = "--no-install" ] && install=false && shift || install=true
[ $# -ge 1 ] || fail "must give output dir"
outd="$1"
REL="$2"
if [ -z "$REL" ]; then
    REL=$(lsb_release -sc) || fail "must give rel, couldn't figure out"
fi
set --

mkdir "$outd" || fail "failed to make output dir"

if [ "$install" = "true" ]; then
    [ "$(id -u)" = "0" ] || fail "must be root"
    apt-get update --quiet || fail "apt-get update failed."
    apt-get install --quiet \
        --assume-yes --no-install-recommends \
        ovmf shim-signed ||
        fail "failed install deps"
else
    echo "skipping install"
fi

set --
set -- "$@" \
   "shim.efi|/usr/lib/shim/shimx64.efi" \
   "signing.pem|/usr/share/ovmf/PkKek-1-snakeoil.pem" \
   "signing.key|/usr/share/ovmf/PkKek-1-snakeoil.key" \
   "signing.password|text:snakeoil"

bd=/usr/share/OVMF
case "$REL" in
    jammy)
        set -- "$@" \
            "ovmf-insecure-code.fd|link:ovmf-secure-code.fd" \
            "ovmf-insecure-vars.fd|$bd/OVMF_VARS_4M.fd" \
            "ovmf-secure-code.fd|$bd/OVMF_CODE_4M.secboot.fd" \
            "ovmf-secure-vars.fd|$bd/OVMF_VARS_4M.snakeoil.fd"
        ;;
    focal)
        set -- "$@" \
            "ovmf-insecure-code.fd|link:ovmf-secure-code.fd" \
            "ovmf-insecure-vars.fd|$bd/OVMF_VARS.fd" \
            "ovmf-secure-code.fd|$bd/OVMF_CODE.secboot.fd" \
            "ovmf-secure-vars.fd|$bd/OVMF_VARS.snakeoil.fd"
        ;;
    *) fail "unknown release $REL";;
esac

for line in "$@"; do
    target="${line%%|*}"
    src=${line#*|}
    case "$src" in
        text:*)
        src=${src#text:}
            echo -n "$src" > "$outd/$target" || fail "failed to write $target"
            echo "wrote $target from text"
        ;;
        link:*)
            src=${src#link:}
            ln -s "$src" "$outd/$target" || fail "failed link $src -> $target"
            echo "linked from $target to $src"
        ;;
        *)
            cp "$src" "$outd/$target" || fail "failed copy $src -> $target"
            echo "wrote $target from $src"
        ;;
    esac
done

info > "$outd/firmware-info.yaml"
echo "wrote info to firmware-info.yaml"
